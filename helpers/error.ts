import { AxiosError } from 'axios'
import { ZodError } from 'zod'

/**
 * Handles server error responses, extracting error messages.
 * @param error The error object to handle.
 * @returns An array of error messages or a single error message.
 */
export function handleServerError (error: unknown) {
  if (error instanceof AxiosError) {
    return error.message.split('\n')
  }

  if (error instanceof Error) {
    return error.message
  }

  return String(error).split('\n')
}

/**
 * Represents a collection of error messages for form validation.
 */
export type FormErrorMessages = Record<string, string>

/**
 * Handles validation errors generated by Zod schema validation.
 * @param err The error object to handle.
 * @returns A collection of form error messages or undefined.
 */
export const handleValidationFormErrors = (
  err: unknown
): FormErrorMessages | undefined => {
  if (err instanceof ZodError) {
    const error: FormErrorMessages = {}
    err.errors.forEach((issue) => {
      if (typeof issue.path[0] === 'string') {
        error[issue.path[0]] = issue.message
      }
    })
    return error
  } else {
    console.log('ERROR=>', err)
    return undefined
  }
}
